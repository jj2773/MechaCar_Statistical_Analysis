plt + geom_col() #plot a bar plot
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45
mpg_summary <- subset(mpg,manufacturer=="toyota") %>%
group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy), .groups = 'keep') %>% #create summary table
{.}
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) +
scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") +
ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
> plt + geom_point() +
labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)",
color="Vehicle Class") #add scatter plot with labels
plt + geom_point() +
labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)",
color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
#each car manufacturer
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rot x-label
mpg_summary <- mpg %>%
group_by(class,year) %>%
summarize(Mean_Hwy=mean(hwy), .groups = 'keep') %>% #create summary table
{.}
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() +
labs(x="Vehicle Class",
y="Vehicle Year",
fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>%
group_by(model,year) %>%
summarize(Mean_Hwy=mean(hwy), .groups = 'keep') %>% #create summary table
{.}
plt <- ggplot(mpg_summary,
aes(x=model,y=factor(year),
fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() +
labs(x="Model",y="Vehicle Year",
fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,
hjust=1,
vjust=.5)) #rotate x-axis labels 90
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,
hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>%
group_by(class) %>%
summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,
y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) +
labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
View(mpg_summary)
#layer in standard deviations on the plot as well
# compute the standard deviations in our dplyr summarize() function,
# layer the upper and lower standard deviation boundaries to our visualization
mpg_summary <- mpg %>%
group_by(class) %>%
summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,
aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) +
labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,
ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",
value="Rating",
c(cty,hwy)) #convert to long format
head(mpg_long)
#visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,aes(x=manufacturer,
y=Rating,color=MPG_Type))#import dataset into ggplot2
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,
hjust=1)) #add boxplot with labels rotated 45
#The produced boxplot is optimal for comparing the city versus highway
#fuel efficiency for each manufacturer, but it is more difficult to compare
#all of the city fuel efficiency across manufacturers
plt <- ggplot(mpg_long,aes(x=manufacturer,
y=Rating,color=MPG_Type))#import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,
hjust=1),legend.position = "none") +
xlab("Manufacturer") #rotate x-axis labels
#use mcars built in dataset to R
head(mcars)
#use mtcars built in dataset to R
head(mtcars)
#check normal distribution test
ggplot(mtcars,aes(x=wt)) +
geom_density() #visualize distribution using density plot
#quantitative test for normality uses a statistical test to quantify the
#probability of whether or not the test data came from a normally
#distributed dataset.  if the p-value is greater than 0.05, the data is
#considered normally distributed.
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',
check.names = F,
stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,
aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#create sample table
sample_table <- population_table %>%
sample_n(50) #randomly sample 50 data points
{.}
plt <- ggplot(sample_table,
aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>%
sample_n(50) %>% #randomly sample 50 data points
{.}
plt <- ggplot(sample_table,
aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#import and us log function to normalize mileage
population_table <- read.csv('used_car_data.csv',
check.names = F,
stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,
aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#create sample table
sample_table <- population_table %>%
sample_n(50) %>% #randomly sample 50 data points
{.}
plt <- ggplot(sample_table,
aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),
mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
#Two sample T testing
sample_table <- population_table %>%
sample_n(50)  %>% #generate 50 randomly sampled data points
{.}
sample_table2 <- population_table %>%
sample_n(50) %>% #generate another 50 randomly sampled data points
{.}
View(sample_table)
View(sample_table2)
# now t test our two sample to see if the null hypothesis is true (small p)
t.test(log10(sample_table$Miles_Driven),
log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
#paired t test are from two different population sets
mpg_data <- read.csv('mpg_modified.csv') #import data set
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points
#where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points
#where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference
#between two samples
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
# NOVA Testing using the mtcars data set
#Is there any statistical difference in the horsepower of a
#vehicle based on its engine type?
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
#However, in the mtcars dataset, the cyl is considered a numerical interval
#vector, not a categorical vector. Therefore, we must clean our data before
#we begin, using the following code:
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
#Data correlation using mtcars dataset
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
#For another example use the used car dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,
y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coeff
#search for a variable with correlation using R to
used_matrix <- as.matrix(used_cars[,c("Selling_Price",
"Present_Price",
"Miles_Driven")]) #convert data frame
#into numeric matrix
> cor(used_matrix)
#search for a variable with correlation using R to
used_matrix <- as.matrix(used_cars[,c("Selling_Price",
"Present_Price",
"Miles_Driven")]) #convert data frame
#into numeric matrix
cor(used_matrix)
?lm()
#linear regression of mtcars example
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec ~ hp,mtcars))
#now visualize in ggplot our regression model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter
#and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple
#linear regression model
summary(lm(qsec ~ mpg +
disp + drat + wt + hp,data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg +
disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
#statistical testing on categorical data module 15.8
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
#statistical testing on categorical data module 15.8
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
table(mpg$class,mpg$year)
setwd("C:/Users/jj277/OneDrive/Desktop/bootcamp/Module15-R/MechaCar_Statistical_Analysis")
#import csv file for car data
MechaCar_df <- csv.read('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
#import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
View(MechaCar_df)
#examine the data
head(MechaCar_df)
# multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance,data=MechaCar_df)
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance,data=MechaCar_df))
#update the model with only those parameters
# multiple linear regression model updated
lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
#update the model with only those parameters
# multiple linear regression model updated
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# lets visualize our two variables with mpg
yvals <- model$coefficients['vehicle_length']*MechaCar_df$vehicle_length +
model$coefficients['(Intercept)']
plt <- ggplot(MechaCar_df,aes(x=vehicle_length,y=mpg))
plt + geom_point() + geom_line(aes(y=yvals),color='red')
View(MechaCar_df)
View(MechaCar_df)
# multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
# get summary stats of model
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
library(dplyr)
# The MechaCar_mpg.csv dataset contains mpg test results for 50 prototype
# MechaCars. The MechaCar prototypes were produced using multiple design
# specifications to identify ideal vehicle performance.
# Multiple metrics, such as vehicle length, vehicle weight, spoiler angle,
# drivetrain, and ground clearance, were collected for each vehicle.
# Using R, design a linear model that predicts the mpg
# of MechaCar prototypes using several variables from the MechaCar_mpg.csv file.
#import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
# examine the data
head(MechaCar_df)
#output for ref
#vehicle_length vehicle_weight spoiler_angle ground_clearance AWD      mpg
#1       14.69710       6407.946      48.78998         14.64098   1 49.04918
#2       12.53421       5182.081      90.00000         14.36668   1 36.76606
#3       20.00000       8337.981      78.63232         12.25371   0 80.00000
#4       13.42849       9419.671      55.93903         12.98936   1 18.94149
#5       15.44998       3772.667      26.12816         15.10396   1 63.82457
#6       14.45357       7286.595      30.58568         13.10695   0 48.54268
# multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
# get summary stats of model
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
View(MechaCar_df)
# get y intercept
yval <- model$coefficients['(Intercept)']
#update the model with only those parameters
# multiple linear regression model updated
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
slope_grd_clear <- model$coefficients['vehicle_length']
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
slope_grd_clear <- model$coefficients['vehicle_length']
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
slope_grd_clear <- model$coefficients['ground_clearance']
library(dplyr)
# The MechaCar_mpg.csv dataset contains mpg test results for 50 prototype
# MechaCars.
# Multiple factors such as vehicle length, vehicle weight, spoiler angle,
# drivetrain, and ground clearance, were noted for each vehicle.
# Using R, design a linear model that predicts the mpg
# of MechaCar prototypes using several variables from the MechaCar_mpg.csv file.
# first import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
# examine the data
head(MechaCar_df)
#output for ref
#vehicle_length vehicle_weight spoiler_angle ground_clearance AWD      mpg
#1       14.69710       6407.946      48.78998         14.64098   1 49.04918
#2       12.53421       5182.081      90.00000         14.36668   1 36.76606
#3       20.00000       8337.981      78.63232         12.25371   0 80.00000
#4       13.42849       9419.671      55.93903         12.98936   1 18.94149
#5       15.44998       3772.667      26.12816         15.10396   1 63.82457
#6       14.45357       7286.595      30.58568         13.10695   0 48.54268
# setup the multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
# get summary stats of model
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
#output for reference...
#Coefficients:
#                   Estimate Std. Error t value Pr(>|t|)
#(Intercept)      -1.040e+02  1.585e+01  -6.559 5.08e-08 ***
#vehicle_length    6.267e+00  6.553e-01   9.563 2.60e-12 ***
#vehicle_weight    1.245e-03  6.890e-04   1.807   0.0776 .
#spoiler_angle     6.877e-02  6.653e-02   1.034   0.3069
#ground_clearance  3.546e+00  5.412e-01   6.551 5.21e-08 ***
#AWD              -3.411e+00  2.535e+00  -1.346   0.1852
---
#Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#
#Residual standard error: 8.774 on 44 degrees of freedom
#Multiple R-squared:  0.7149,	Adjusted R-squared:  0.6825
#F-statistic: 22.07 on 5 and 44 DF,  p-value: 5.35e-11
# p values in the summary stats indicate only y intercept, vehicle_length
# and ground_clearance are statistically significant for our model
#update the model with only those parameters
# multiple linear regression model updated
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
#returns -91.6
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
# returns 6.08
slope_grd_clear <- model$coefficients['ground_clearance']
# returns 3.57
# multiple linear regression model formula becomes
# mpg=-91.6+6.08*vehicle_length+3.57*ground_clearance
library(dplyr)
# The MechaCar_mpg.csv dataset contains mpg test results for 50 prototype
# MechaCars.
# Multiple factors such as vehicle length, vehicle weight, spoiler angle,
# drivetrain, and ground clearance, were noted for each vehicle.
# Using R, design a linear model that predicts the mpg
# of MechaCar prototypes using several variables from the MechaCar_mpg.csv file.
# first import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
# examine the data
head(MechaCar_df)
#output for ref
#vehicle_length vehicle_weight spoiler_angle ground_clearance AWD      mpg
#1       14.69710       6407.946      48.78998         14.64098   1 49.04918
#2       12.53421       5182.081      90.00000         14.36668   1 36.76606
#3       20.00000       8337.981      78.63232         12.25371   0 80.00000
#4       13.42849       9419.671      55.93903         12.98936   1 18.94149
#5       15.44998       3772.667      26.12816         15.10396   1 63.82457
#6       14.45357       7286.595      30.58568         13.10695   0 48.54268
# setup the multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
# get summary stats of model
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
#output for reference...
#Coefficients:
#                   Estimate Std. Error t value Pr(>|t|)
#(Intercept)      -1.040e+02  1.585e+01  -6.559 5.08e-08 ***
#vehicle_length    6.267e+00  6.553e-01   9.563 2.60e-12 ***
#vehicle_weight    1.245e-03  6.890e-04   1.807   0.0776 .
#spoiler_angle     6.877e-02  6.653e-02   1.034   0.3069
#ground_clearance  3.546e+00  5.412e-01   6.551 5.21e-08 ***
#AWD              -3.411e+00  2.535e+00  -1.346   0.1852
---
#Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#
#Residual standard error: 8.774 on 44 degrees of freedom
#Multiple R-squared:  0.7149,	Adjusted R-squared:  0.6825
#F-statistic: 22.07 on 5 and 44 DF,  p-value: 5.35e-11
# p values in the summary stats indicate only y intercept, vehicle_length
# and ground_clearance are statistically significant for our model
#update the model with only those parameters
# multiple linear regression model updated
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
#returns -91.6
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
# returns 6.08
slope_grd_clear <- model$coefficients['ground_clearance']
# returns 3.57
# multiple linear regression model formula becomes
# mpg=-91.6+6.08*vehicle_length+3.57*ground_clearance
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
yval <- model$coefficients['(Intercept)']
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
# returns 6.08
slope_grd_clear <- model$coefficients['ground_clearance']
library(dplyr)
# The MechaCar_mpg.csv dataset contains mpg test results for 50 prototype
# MechaCars.
# Multiple factors such as vehicle length, vehicle weight, spoiler angle,
# drivetrain, and ground clearance, were noted for each vehicle.
# Using R, design a linear model that predicts the mpg
# of MechaCar prototypes using several variables from the MechaCar_mpg.csv file.
# first import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
# examine the data
head(MechaCar_df)
#output for ref
#vehicle_length vehicle_weight spoiler_angle ground_clearance AWD      mpg
#1       14.69710       6407.946      48.78998         14.64098   1 49.04918
#2       12.53421       5182.081      90.00000         14.36668   1 36.76606
#3       20.00000       8337.981      78.63232         12.25371   0 80.00000
#4       13.42849       9419.671      55.93903         12.98936   1 18.94149
#5       15.44998       3772.667      26.12816         15.10396   1 63.82457
#6       14.45357       7286.595      30.58568         13.10695   0 48.54268
# setup the multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
# get summary stats of model
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
#output for reference...
#Coefficients:
#                   Estimate Std. Error t value Pr(>|t|)
#(Intercept)      -1.040e+02  1.585e+01  -6.559 5.08e-08 ***
#vehicle_length    6.267e+00  6.553e-01   9.563 2.60e-12 ***
#vehicle_weight    1.245e-03  6.890e-04   1.807   0.0776 .
#spoiler_angle     6.877e-02  6.653e-02   1.034   0.3069
#ground_clearance  3.546e+00  5.412e-01   6.551 5.21e-08 ***
#AWD              -3.411e+00  2.535e+00  -1.346   0.1852
---
#Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#
#Residual standard error: 8.774 on 44 degrees of freedom
#Multiple R-squared:  0.7149,	Adjusted R-squared:  0.6825
#F-statistic: 22.07 on 5 and 44 DF,  p-value: 5.35e-11
# p values in the summary stats indicate only y intercept, vehicle_length
# and ground_clearance are statistically significant for our model
#update the model with only those parameters
# multiple linear regression model updated
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
#returns -91.6
# get slope coefficients
slope_veh_len <- model$coefficients['vehicle_length']
# returns 6.08
slope_grd_clear <- model$coefficients['ground_clearance']
# returns 3.57
# multiple linear regression model formula becomes
# mpg=-91.6+6.08*vehicle_length+3.57*ground_clearance
library(dplyr)
# first import csv file for car data
MechaCar_df <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors=F)
# examine the data
head(MechaCar_df)
# setup the multiple linear regression model
lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df)
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
# get summary stats of updated model
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
# get y intercept
yval <- model$coefficients['(Intercept)']
summary(lm(mpg ~ vehicle_length +
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_df))
model <- lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df)
summary(lm(mpg ~ vehicle_length + ground_clearance,data=MechaCar_df))
yval <- model$coefficients['(Intercept)']
slope_veh_len <- model$coefficients['vehicle_length']
# returns 6.08
slope_grd_clear <- model$coefficients['ground_clearance']
